#V2
select * from results;
select to_timestamp('2025-06-28 12:03:03');
select arrow_typeof(to_timestamp('2025-06-28 12:03:03'));
select to_timestamp('2025-06-28 12:03:03');
select * from results;
select * from 'results';
select git_revision, benchmark_name, query_name, query_type, min(execution_time), max(execution_time), avg(execution_time) from 'results' group by 1, 2, 3, 4, order by 1,2,3,4;
select git_revision, benchmark_name, query_name, query_type, min(execution_time), max(execution_time), avg(execution_time) from 'results' group by 1, 2, 3, 4 order by 1,2,3,4;
select * from 'commits.csv' limit 10;
select * from 'commits.csv';
select arrow_typeof(time) from 'commits.csv';
select date_bin(time, '1 hour') from 'commits.csv';
select date_bin('1 hour', time) from 'commits.csv';
select *, date_bin('1 day', time) as day from 'commits.csv';
select revision, time, first_value(revision) OVER (ORDER BY day) FROM (select *, date_bin('1 day', time) as day from 'commits.csv');
select revision, time, first_value(revision) OVER (ORDER BY day)  as first_value FROM (select *, date_bin('1 day', time) as day from 'commits.csv');
select revision, time, first_value(revision) OVER (ORDER BY day) as first_value FROM (select *, date_bin('1 day', time) as day from 'commits.csv') ORDER BY first_value;
select revision, time, first_value(rev) OVER (PARTITION BY day ORDER BY time) as first_rev FROM (select *, date_bin('1 day', time) as day from 'commits.csv') ORDER BY day;
select revision, time, first_value(revision) OVER (PARTITION BY day ORDER BY time) as first_rev FROM (select *, date_bin('1 day', time) as day from 'commits.csv') ORDER BY day;
select revision, day time, first_value(revision) OVER (PARTITION BY day ORDER BY time DESC) as first_rev FROM (select *, date_bin('1 day', time) as day from 'commits.csv') ORDER by time DESC;
select revision, day time, first_value(revision) OVER (PARTITION BY day ORDER BY time DESC) as first_rev, url FROM (select *, date_bin('1 day', time) as day from 'commits.csv') ORDER by time DESC;
select revision, day time, first_value(revision) OVER (PARTITION BY day ORDER BY time DESC) as first_rev, url FROM (select *, date_bin('1 day', time) as day from 'commits.csv') ORDER by time;
select revision, day time, first_value(revision) OVER (PARTITION BY day ORDER BY time DESC) as first_rev, url FROM (select *, date_bin('1 day', time) as day from 'commits.csv') ORDER by time DESC;
select revision, day, time, first_value(revision) OVER (PARTITION BY day ORDER BY time DESC) as first_rev, url FROM (select *, date_bin('1 day', time) as day from 'commits.csv') ORDER by time DESC;
select revision, day, time, first_value(revision) OVER (PARTITION BY day ORDER BY time) as first_rev, url FROM (select *, date_bin('1 day', time) as day from 'commits.csv') ORDER by time DESC;
select revision, day, time, url FROM (select *, date_bin('1 day', time) as day from 'commits.csv') WHERE first_value(revision) OVER (PARTITION BY day ORDER BY time) = revision ORDER by time DESC;
select revision, day, time, url FROM (select *, date_bin('1 day', time) as day from 'commits.csv') WHERE (first_value(revision) OVER (PARTITION BY day ORDER BY time)) = revision ORDER by time DESC;
select revision, day, time, first_value(revision) OVER (PARTITION BY day ORDER BY time DESC) as first_rev, url FROM (select *, date_bin('1 day', time) as day from 'commits.csv') ORDER by time DESC;
SELECT revision, day, time FROM (select revision, day, time, first_value(revision) OVER (PARTITION BY day ORDER BY time DESC) as first_rev, url FROM (select *, date_bin('1 day', time) as day from 'commits.csv')) WHERE first_rev = revision ORDER by time DESC;
select * from 'results';
select * from 'results' where git_revision = '47.0.0';
select * from 'commits.csv' limit 1;
SELECT './build_datafusion_cli.sh ' || revision from 'commits.csv' order by time desc limit 10;
SELECT time, './build_datafusion_cli.sh ' || revision from 'commits.csv' order by time desc limit 10;
CREATE EXTERNAL TABLE benchmark_results (\n        benchmark_name VARCHAR,\n        query_name VARCHAR,\n        query_type VARCHAR,\n        execution_time DOUBLE,\n        run_timestamp VARCHAR,\n        git_revision VARCHAR,\n        git_revision_timestamp VARCHAR,\n        num_cores BIGINT\n    )\n    STORED AS CSV\n    LOCATION '{csv_pattern}'\n    OPTIONS ('format.has_header' 'true');
select * from benchmark_results limit 10;
CREATE EXTERNAL TABLE benchmark_results (\n        benchmark_name VARCHAR,\n        query_name VARCHAR,\n        query_type VARCHAR,\n        execution_time DOUBLE,\n        run_timestamp VARCHAR,\n        git_revision VARCHAR,\n        git_revision_timestamp VARCHAR,\n        num_cores BIGINT\n    )\n    STORED AS CSV\n    LOCATION 'results'\n    OPTIONS ('format.has_header' 'true');
select * from benchmark_results limit 10;
WITH query_baselines AS (\n        SELECT \n            query_name,\n            MIN(execution_time) as baseline_time\n        FROM benchmark_results \n        WHERE query_type = 'query'\n        GROUP BY query_name\n    )\n    SELECT \n        br.git_revision,\n        br.git_revision_timestamp,\n        br.query_name,\n        br.execution_time,\n        qb.baseline_time,\n        -- ClickBench normalization: (10ms + query_time) / (10ms + baseline_time)\n        (0.01 + br.execution_time) / (0.01 + qb.baseline_time) as normalized_time\n    FROM benchmark_results br\n    JOIN query_baselines qb ON br.query_name = qb.query_name\n    WHERE br.query_type = 'query';
WITH query_baselines AS (\n        SELECT \n            query_name,\n            MIN(execution_time) as baseline_time\n        FROM benchmark_results \n        WHERE query_type = 'query'\n        GROUP BY query_name\n    )\n    SELECT \n        br.git_revision,\n        br.git_revision_timestamp,\n        br.query_name,\n        br.execution_time,\n        qb.baseline_time,\n        -- ClickBench normalization: (10ms + query_time) / (10ms + baseline_time)\n        (0.01 + br.execution_time) / (0.01 + qb.baseline_time) as normalized_time\n    FROM benchmark_results br\n    JOIN query_baselines qb ON br.query_name = qb.query_name\n    WHERE br.query_type = 'query' ORDER BY git_revision_timestamp;
WITH query_baselines AS (\n        SELECT \n            query_name,\n            MIN(execution_time) as baseline_time\n        FROM benchmark_results \n        WHERE query_type = 'query'\n        GROUP BY query_name\n    )\n    SELECT \n        br.git_revision,\n        br.git_revision_timestamp,\n        br.query_name,\n        br.execution_time,\n        qb.baseline_time,\n        -- ClickBench normalization: (10ms + query_time) / (10ms + baseline_time)\n        (0.01 + br.execution_time) / (0.01 + qb.baseline_time) as normalized_time\n    FROM benchmark_results br\n    JOIN query_baselines qb ON br.query_name = qb.query_name\n    WHERE br.query_type = 'query';
create view normalized_results_js as WITH query_baselines AS (\n        SELECT \n            query_name,\n            MIN(execution_time) as baseline_time\n        FROM benchmark_results \n        WHERE query_type = 'query'\n        GROUP BY query_name\n    )\n    SELECT \n        br.git_revision,\n        br.git_revision_timestamp,\n        br.query_name,\n        br.execution_time,\n        qb.baseline_time,\n        -- ClickBench normalization: (10ms + query_time) / (10ms + baseline_time)\n        (0.01 + br.execution_time) / (0.01 + qb.baseline_time) as normalized_time\n    FROM benchmark_results br\n    JOIN query_baselines qb ON br.query_name = qb.query_name\n    WHERE br.query_type = 'query';
SELECT \n        git_revision,\n        git_revision_timestamp,\n        AVG(normalized_time) as avg_time,\n        MEDIAN(normalized_time) as median_time\n    FROM normalized_results_js\n    GROUP BY git_revision_timestamp, git_revision\n    ORDER BY git_revision_timestamp, git_revision;
SELECT \n        git_revision,\n        git_revision_timestamp,\n        query_name,\n        MEDIAN(normalized_time) as median_time\n    FROM normalized_results_js \n    GROUP BY git_revision, git_revision_timestamp, query_name\n    ORDER BY git_revision_timestamp, query_name;
